

REACT & REACT RELATED
- React Framework: Next.js https://nextjs.org/
-React useState: Toggle Favorite Recipes Selected https://www.codecademy.com/courses/react-101/lessons/the-state-hook/exercises/arrays-in-state
-React useSWR Fetcher: Client Side Fetching https://swr.vercel.app/
-React Reveal: Transitions library https://www.react-reveal.com/examples/common/fade/
-Next.js useRouter: Dynamic Routing https://nextjs.org/docs/routing/dynamic-routes
-React onHover: Dropdown menu https://upmostly.com/tutorials/react-onhover-event-handling-with-examples
-Next.config.js: Rewrite between 2 servers during Development https://nextjs.org/docs/api-reference/next.config.js/rewrites
-React lists and keys https://reactjs.org/docs/lists-and-keys.html#keys
-React Modal: Venmo PopOut https://github.com/reactjs/react-modal
DID NOT USEDelete with Fetch: https://jasonwatmore.com/post/2020/11/11/react-fetch-http-delete-request-examples
-React Local Storage: https://programmingwithmosh.com/react/localstorage-react/
-React Local Storage: https://www.freecodecamp.org/news/how-to-persist-a-logged-in-user-in-react/
-React useEffect: https://reactjs.org/docs/hooks-effect.html
-React Links: https://nextjs.org/docs/api-reference/next/link
-MAPS API
-Google Maps API: https://developers.google.com/codelabs/maps-platform/google-maps-nearby-search-js#0
-Inline Frame: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe
-Next/Router: https://nextjs.org/docs/api-reference/next/router
FRONT END
-Form Data: https://developer.mozilla.org/en-US/docs/Web/API/Event/target
-Form Data: https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData/get
-EncodeURI: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent


SMS API
Send Text Messages: https://www.twilio.com/console

CSS & STYLING
-Trader Joe's Font https://www.fontspace.com/trader-joes-font-f34830
-Free Icons http://www.fontawesome.com/icons
-FontAwesome with Yarn https://fontawesome.com/how-to-use/on-the-web/using-with/react
-Free graphics https://www.canva.com
-Create Image Transparency  Adobe Photoshop CC
-Convert to .ico Image https://www.icoconverter.com
Position Background image in Position of Div 
  // https://stackoverflow.com/questions/48288176/set-background-image-to-full-screen-in-reactjs/50769188
  // https://www.w3schools.com/cssref/css3_pr_background-size.asp
CSS Buttons https://www.w3schools.com/css/css3_buttons.asp
Centering CSS
  // https://www.freecodecamp.org/news/how-to-center-anything-with-css-align-a-div-text-and-more/
  // https://www.w3.org/Style/Examples/007/center.en.html
CSS Semantics
  // https://css-tricks.com/semantic-class-names/
Display Search Button Inline with Form: https://stackoverflow.com/questions/9117209/no-line-break-between-button-and-form

PYTHON & BACKEND
Render random recipes https://www.w3schools.com/python/ref_random_choices.asp
Werkzeug: Password Hashing in Flask https://www.youtube.com/watch?v=jJ4awOToB6k

JAVASCRIPT & FRONTEND
ARRAY METHODS
 // map https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
 // includes https://www.w3schools.com/jsref/jsref_includes_array.asp
 // forEach https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
 // slice https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice


WHOOSH THAT NEVER WORKED!!!!! COME BACK TO THIS FOR BETTER SEARCH?
https://www.youtube.com/watch?v=bAPcmGNsulc
https://pypi.org/project/Flask-WhooshAlchemy/0.4a/#files
https://pythonhosted.org/Flask-WhooshAlchemy/

SQLALCHEMY & QUERIES
Checking if data exists https://docs.sqlalchemy.org/en/13/orm/query.html?highlight=exists#sqlalchemy.orm.query.Query.exists
SQLAlchemy back-end search https://www.youtube.com/watch?v=HXKDyZ_W6rI


 PRACTICE / TEST CODE
 https://Repl.it


LOOK INTO TESTING
https://jestjs.io/
https://testing-library.com/docs/react-testing-library/intro/



JAVASCRIPT OBJECT destructuring TO USE USER DATA FOR 

if (!user) {

}

if (user) {
  const {fname, phone, user_id} = user;
}


LIFE CYCLE METHODS
CLASS COMPONENT > COMPONENTDIDUPDATE()
LIKELY NOT NEED TO USE THEM IN project
THEY COME UP A loT 
life cycle of react app different things trigger different METHODS

useEffect = easy to do simple things, can do a lot of things, can get really complicated

if you say you're a react developer, you really need to know useEffect

might use useEffect for a hoverstate or a watcher,
e.g. like a variable when it changes it's value and do something based on it
e.g. like adding to a counter and using that value to change something on the page


  //need fetcher, need to pass a url to a promise and turn the response to json
  // save it as a variable and use SWR which takes in two parameters, the url and the function
  // to do behind the scenes work
  // https://nextjs.org/docs/routing/introduction FIGURE OUT DYNAMIC LINKS!!!!! 

  // https://dev.to/ryanccn/data-fetching-with-next-js-38b6
  // https://nextjs.org/docs/basic-features/data-fetching
  // https://swr.vercel.app/
    // Fetching tag items and rendering with capitalized letters



// THINGS I NEED TO MAKE FAVORITE AND UNFAVORITE TOGGLE BUTTON:
// 1. Favorite and unfavorite Icons : faHeart and faHeartBroken (DONE)
        // Import icons to detailedrecipe.js (DONE)
// 2. A way to reach crud to add or delete from the database
//      - My add/delete crud functions on the backend (DONE)
//        - crud.create_user_recipe(user_id, recipe_id) (DONE)
//        - crud.delete_user_recipe(user_id, recipe_id) (DONE)
//    How to I call them on a button or from the front end?
//      - Do I need to route through server.py with dynamic routing?
//      - FETCH REQUEST TO THE BACKEND, 


// 3. A button that toggles on selected (WORKING ON)
// 4. The button shows the default icon based on boolean if a user/recipe relationship exists
//      - Crud function on the backend: crud.get_favorite_boolean(user_id, recipe_id) (DONE)

        // - CHECK THE BACK END BOOLEAN FIRST 
        // - AWAIT Response
        // - RENDER THE CORRECT STATE ON THE FRONT end
        // - SET STATE BASED ON THE RESPONSE
        // - TOGGLE THE STATE WILL ALSO RUN A DYNAMIC ROUTE THAT 

//      - useState defaults to boolean of query if the favorite already exists (DONE)
//          - favorite, setFavorite
// 5. The button adds or deletes from the database on click
//      - The button setFavorite on the front end toggle
//      - The button adds or deletes from database, using dynamic routing?
// onCLICK

// FETCH REQUEST FOR THE STATE SAVE IT AS A CONST

  // set boolean default value if user exists


//   if (user !== null) {
//     const fetchBoolFunction = url => fetch(url).then(r => r.json())
  
//     const favoriteBool = useSWR(`/api/${user.user_id}/recipes/${props.recipe_id}/`, fetchBoolFunction)
  
//     if (favoriteBool.error) return <div>failed to load</div>
//     if (!favoriteBool.data) return <div>loading...</div>
    

    REPEAT Recipes
    FALAFEL SURPRISE



    react hooks cheat sheet

    https://blog.logrocket.com/react-hooks-cheat-sheet-unlock-solutions-to-common-problems-af4caf699e70/
Ternary
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator